// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use methods::{
    GUEST_CODE_FOR_SPOTCHECK_ELF, GUEST_CODE_FOR_SPOTCHECK_ID
};
use risc0_zkvm::{default_prover, ExecutorEnv};
use tokio;
use spotcheck_core::GeoLocation;
use serde_json::Value;
//use risc0_zkvm::serde::from_slice;
const API_URL: &str = "https://ipapi.co/json/";

pub async fn get_geo_location() ->Result<GeoLocation, Box<dyn std::error::Error>>{
    //let response = reqwest::get(API_URL).await?.json::<serde_json::Value>().await?;
    let response: Value= ureq::get(API_URL)
        .call()?
        .into_json()?;
    let geo_location = GeoLocation {
        latitude: response["latitude"].as_f64().unwrap(),
        longitude: response["longitude"].as_f64().unwrap(),
        accuracy: 1000.0,
        timestamp: std::time::SystemTime::now()
            .duration_since(std::time::UNIX_EPOCH)?
            .as_secs(),
    };

    Ok(geo_location)
}

#[tokio::main]
async fn main() ->Result<(), Box<dyn std::error::Error>>{
    let mut output = Vec::new();

    // Initialize tracing. In order to view logs, run `RUST_LOG=info cargo run`
    tracing_subscriber::fmt()
        .with_env_filter(tracing_subscriber::filter::EnvFilter::from_default_env())
        .init();

    // An executor environment describes the configurations for the zkVM
    // including program inputs.
    // An default ExecutorEnv can be created like so:
    // `let env = ExecutorEnv::builder().build().unwrap();`
    // However, this `env` does not have any inputs.
    //
    // To add guest input to the executor environment, use
    // ExecutorEnvBuilder::write().
    // To access this method, you'll need to use ExecutorEnv::builder(), which
    // creates an ExecutorEnvBuilder. When you're done adding input, call
    // ExecutorEnvBuilder::build().

    // For example:
    let input = get_geo_location().await.unwrap();
    let env = ExecutorEnv::builder()
        .write(&input)
        .unwrap()
        .stdout(&mut output)
        .build()
        .unwrap();
   // let tmp = &output;
   
   // let result: bool = serde_json::from_slice(&output)?;
    //println!("Hello, Geo! {}", result);
 

    // Obtain the default prover.
    let prover = default_prover();

    // Proof information by proving the specified ELF binary.
    // This struct contains the receipt along with statistics about execution of the guest
    let prove_info = prover
        .prove(env, GUEST_CODE_FOR_SPOTCHECK_ELF)
        .unwrap();

    // extract the receipt.
    let receipt = prove_info.receipt;

    // TODO: Implement code for retrieving receipt journal here.

    // For example:
    let _output: u32 = receipt.journal.decode().unwrap();

    // The receipt was verified at the end of proving, but the below code is an
    // example of how someone else could verify this receipt.
    receipt
        .verify(GUEST_CODE_FOR_SPOTCHECK_ID)
        .unwrap();

    //let result: bool = serde_json::from_slice(&output)?;
    //let result:u8 = output[0];
    println!("{}",output.len());
   // println!("Hello, Geo! {}", result);
   
    Ok(())
}
